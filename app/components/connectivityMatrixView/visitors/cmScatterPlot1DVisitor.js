/*global d3
 */

import {visScatterPlot1D} from "../../vis/visScatterPlot1D";
import {cmAttributeCellVisitor} from "./cmAttributeCellVisitor"

/**
 * Visitor to preprocess per-node attributes and find valueRange.
 * This finds the value range of all attribute cells.
 */
export class cmScatterPlot1DPreprocessor extends cmAttributeCellVisitor {
  constructor(attributeIndex, attributeNodeGroup) {
    super(attributeIndex, attributeNodeGroup);
    this.values = [];
  }

  apply(cell) {
    if (this.shouldVisitCell(cell)) {
      for (var i = 0; i < cell.data.values.length; ++i) {
        this.values.push(cell.data.values[i]);
      }
    }
  }

  getValueRange() {
    return [d3.min(this.values), d3.max(this.values)];
  }
}

/**
 * Visitor to create 1D scatterplots in per-node attribute cells.
 * valueRange should be generated by the proceprocessor.
 */
export class cmScatterPlot1DVisitor extends cmAttributeCellVisitor {
  constructor(attributeIndex, attributeNodeGroup, radius, valueRange) {
    super(attributeIndex, attributeNodeGroup);
    this.radius = radius;
    this.valueRange = valueRange;
  }

  apply(cell) {
    if (this.shouldVisitCell(cell)) {
      let data = cell.data;
      let values = cell.data.values;

      if (this.callbacks) {
        if (data.isVertical) {
          this.width = 15;
          this.height = 70;
        } else {
          this.width = 70;
          this.height = 15;
        }
        this.createInteractionGroup(cell);
      }

      let self = this;
      let mouseover = function () {
        self.callbacks.mouseOver(cell);
      };

      let mouseout = function () {
        self.callbacks.mouseOut(cell);
      };

      if (data.isVertical) {

        new visScatterPlot1D(cell.interactionGroup, 15, 70, this.radius, values, this.valueRange, data.orientation, mouseover, mouseout);

      } else {
        new visScatterPlot1D(cell.interactionGroup, 70, 15, this.radius, values, this.valueRange, data.orientation, mouseover, mouseout);
      }

    }
  }
}

